@startuml
hide empty methods
hide empty fields

class App {
    + main()
}

class DocumentManagement {
    - Arraylist<Document> documents
    - SearchEngine searchEngine
    - Arraylist<Author> authors
    - Arraylist<Keyword> keywords
    - boolean isRunning
    + void run()
    + void initialMenu()
    - void addDocument(authors: Author)
    - void showFilteringOption()
    - void printAllDocuments()
    + void falseData()
}

abstract Document {
    - String title
    - int yearOfPublication
    - String type
    - Arraylist<Integer> authorsId
    - Arraylist<Integer> keywordsId
    + Document()
    + Document(title: String, authors: Arraylist<Integer>, yearOfPublication: int, type: String, keywords: Arraylist<Integer>)
    + void printDocument(document: Document, authors: Authors, keywords: Keywords)
    # void addTitle()
    # void addYearOfPublication()
    # void addAuthor()
    # void addKeywords()
    + String getTitle()
    + int getYearOfPublication()
    + String getType()
    + Arraylist<Integer> getAuthorsId()
    + Arraylist<Integer> getKeywordsId()
    + void setType(type: String)
    + String toString(authors: Authors, keywords: Keywords)
}

class Paper {
    + Paper(title: String, authors: Arraylist<Integer>, yearOfPublication: int, type: String, keywords: Arraylist<Integer>)
    + Paper(authors: Authors, keywords: Keywords)
}

class Magazine {
    + Magazine(title: String, authors: Arraylist<Integer>, yearOfPublication: int, type: String, keywords: Arraylist<Integer>)
    + Magazine(authors: Authors, keywords: Keywords)
}

class Article {
    + Article(title: String, authors: Arraylist<Integer>, yearOfPublication: int, type: String, keywords: Arraylist<Integer>)
    + Article(authors: Authors, keywords: Keywords)
}

class Book {
    + Book(title: String, authors: Arraylist<Integer>, yearOfPublication: int, type: String, keywords: Arraylist<Integer>)
    + Book(authors: Authors, keywords: Keywords)
}

class SearchEngine {
    + void searchDocument(documents: Arraylist<Document>, authors: Authors, keywords: Keywords)
}

class SearchDocument {
    - Arraylist<Document> documents
    - Arraylist<Author> authors
    - Arraylist<Keyword> keywords
    + SearchDocument(documents: Arraylist<Document>, authors: Authors, keywords: Keywords)
    + void newSearch(typeOfSearch: String, dataToSearch: String)
    - Arraylist<Document> searchByTitle(title: String)
    + Arraylist<Document> searchByAuthor(author: String)
    - Arraylist<Document> searchByYearOfPublication(year: int)
    - Arraylist<Document> searchByType(type: String)
    + Arraylist<Document> searchByKeywords(keyword: String)
    + void printResult(Arraylist<Document> result)
}

class Author {
    + mapAuthors: map<Integer, String>
    + Author()
    + void addAuthor(name: String)
    + void addAuthor(id: int, name: String)
    + int showAuthorByName(name: String)
    + void showAllAuthors()
    + Arraylist<String> printAuthors(Arraylist<Integer> authorsId)
    + Arraylist<String> findSimilarAuthors(String authorName)
}

class Keyword{
    # mapKeyword: map<Integer, String>
    + Keyword()
    + void addKeyword(keyword: String)
    + void addKeyword(id: int, keyword: String)
    + int showKeywordByName(keyword: String)
    + void showAllKeywords()
    + Arraylist<String> printKeywords(Arraylist<Integer> keywordsId)
}

@enduml